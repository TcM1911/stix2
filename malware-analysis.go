// Copyright 2020 Joakim Kennedy. All rights reserved. Use of
// this source code is governed by the included BSD license.

package stix2

// MalwareAnalysis captures the metadata and results of a particular static or
// dynamic analysis performed on a malware instance or family.
type MalwareAnalysis struct {
	STIXDomainObject
	// Product is the name of the analysis engine or product that was used.
	// Product names SHOULD be all lowercase with words separated by a dash
	// "-". For cases where the name of a product cannot be specified, a value
	// of "anonymized" MUST be used.
	Product string `json:"product"`
	// Version of the analysis product that was used to perform the analysis.
	Version string `json:"version,omitempty"`
	// HostVM is a description of the virtual machine environment used to host
	// the guest operating system (if applicable) that was used for the dynamic
	// analysis of the malware instance or family. If this value is not
	// included in conjunction with the operating_system_ref property, this
	// means that the dynamic analysis may have been performed on bare metal
	// (i.e. without virtualization) or the information was redacted. The value
	// of this property MUST be the identifier for a SCO software object.
	HostVM Identifier `json:"host_vm_ref,omitempty"`
	// OS is the operating system used for the dynamic analysis of the malware
	// instance or family. This applies to virtualized operating systems as
	// well as those running on bare metal. The value of this property MUST be
	// the identifier for a SCO software object.
	OS Identifier `json:"operating_system_ref,omitempty"`
	// InstalledSoftware is a list of any non-standard software installed on
	// the operating system (specified through the operating-system value) used
	// for the dynamic analysis of the malware instance or family. The value of
	// this property MUST be the identifier for a SCO software object.
	InstalledSoftware []Identifier `json:"installed_software_refs,omitempty"`
	// ConfigurationVersion captures the named configuration of additional product
	// configuration parameters for this analysis run. For example, when a
	// product is configured to do full depth analysis of Windowâ„¢ PE files.
	// This configuration may have a named version and that named version can
	// be captured in this property. This will ensure additional runs can be
	// configured in the same way.
	ConfigurationVersion string `json:"configuration_version,omitempty"`
	// Modules aptures the specific analysis modules that were used and
	// configured in the product during this analysis run. For example,
	// configuring a product to support analysis of Dridex.
	Modules []string `json:"modules,omitempty"`
	// AnalysisEngineVersion is the version of the analysis engine or product
	// (including AV engines) that was used to perform the analysis.
	AnalysisEngineVersion string `json:"analysis_engine_version,omitempty"`
	// AnalysisDefinitionVersion is the version of the analysis definitions
	// used by the analysis tool (including AV tools).
	AnalysisDefinitionVersion string `json:"analysis_definition_version,omitempty"`
	// Submitted is the date and time that the malware was first submitted for
	// scanning or analysis. This value will stay constant while the scanned
	// date can change. For example, when MalwareAnalysis was submitted to a virus
	// analysis tool.
	Submitted *Timestamp `json:"submitted,omitempty"`
	// AnalysisStarted is the date and time that the malware analysis was
	// initiated.
	AnalysisStarted *Timestamp `json:"analysis_started,omitempty"`
	// AnalysisEnded is the date and time that the malware analysis ended.
	AnalysisEnded *Timestamp `json:"analysis_ended,omitempty"`
	// AVResult is the classification result or name assigned to the malware
	// instance by the AV scanner tool.
	AVResult string `json:"av_result,omitempty"`
	// AnalysisSCOs contains the references to the STIX Cyber-observable
	// Objects that were captured during the analysis process.
	AnalysisSCOs []Identifier `json:"analysis_sco_refs,omitempty"`
}

// AddCharacterizes describes that the malware analysis is describes the
// related malware.
func (c *MalwareAnalysis) AddCharacterizes(id Identifier, opts ...RelationshipOption) (*Relationship, error) {
	if !IsValidIdentifier(id) || !id.ForType(TypeMalware) {
		return nil, ErrInvalidParameter
	}
	return NewRelationship(RelationshipTypeCharacterizes, c.ID, id, opts...)
}

// AddAVAnalysisOf describes that the malware analysis is AV scan results for
// the related malware.
func (c *MalwareAnalysis) AddAVAnalysisOf(id Identifier, opts ...RelationshipOption) (*Relationship, error) {
	if !IsValidIdentifier(id) || !id.ForType(TypeMalware) {
		return nil, ErrInvalidParameter
	}
	return NewRelationship(RelationshipTypeAVAnalysisOf, c.ID, id, opts...)
}

// AddStaticAnalysisOf describes that the malware analysis is static analysis
// results for the related malware.
func (c *MalwareAnalysis) AddStaticAnalysisOf(id Identifier, opts ...RelationshipOption) (*Relationship, error) {
	if !IsValidIdentifier(id) || !id.ForType(TypeMalware) {
		return nil, ErrInvalidParameter
	}
	return NewRelationship(RelationshipTypeStaticAnalysisOf, c.ID, id, opts...)
}

// AddDynamicAnalysisOf describes hat the malware analysis is dynamic analysis
// results for the related malware.
func (c *MalwareAnalysis) AddDynamicAnalysisOf(id Identifier, opts ...RelationshipOption) (*Relationship, error) {
	if !IsValidIdentifier(id) || !id.ForType(TypeMalware) {
		return nil, ErrInvalidParameter
	}
	return NewRelationship(RelationshipTypeDynamicAnalysisOf, c.ID, id, opts...)
}

// NewMalwareAnalysis creates a new MalwareAnalysis object. One of result or
// analysisSCOs must be provided.
func NewMalwareAnalysis(product, result string, analysisSCOs []Identifier, opts ...MalwareAnalysisOption) (*MalwareAnalysis, error) {
	if product == "" || (len(analysisSCOs) == 0 && result == "") {
		return nil, ErrPropertyMissing
	}
	base := newSTIXDomainObject(TypeMalwareAnalysis)
	obj := &MalwareAnalysis{
		STIXDomainObject: base,
		Product:          product,
		AnalysisSCOs:     analysisSCOs,
		AVResult:         result,
	}

	for _, opt := range opts {
		if opt == nil {
			continue
		}
		opt(obj)
	}
	return obj, nil
}

// MalwareAnalysisOption is an optional parameter when constructing a
// MalwareAnalysis object.
type MalwareAnalysisOption func(a *MalwareAnalysis)

/*
	Base object options
*/

// MalwareAnalysisOptionSpecVersion sets the STIX spec version.
func MalwareAnalysisOptionSpecVersion(ver string) MalwareAnalysisOption {
	return func(obj *MalwareAnalysis) {
		obj.SpecVersion = ver
	}
}

// MalwareAnalysisOptionExternalReferences sets the external references attribute.
func MalwareAnalysisOptionExternalReferences(refs []*ExternalReference) MalwareAnalysisOption {
	return func(obj *MalwareAnalysis) {
		obj.ExternalReferences = refs
	}
}

// MalwareAnalysisOptionObjectMarking sets the object marking attribute.
func MalwareAnalysisOptionObjectMarking(om []Identifier) MalwareAnalysisOption {
	return func(obj *MalwareAnalysis) {
		obj.ObjectMarking = om
	}
}

// MalwareAnalysisOptionGranularMarking sets the granular marking attribute.
func MalwareAnalysisOptionGranularMarking(gm *GranularMarking) MalwareAnalysisOption {
	return func(obj *MalwareAnalysis) {
		obj.GranularMarking = gm
	}
}

// MalwareAnalysisOptionLang sets the lang attribute.
func MalwareAnalysisOptionLang(lang string) MalwareAnalysisOption {
	return func(obj *MalwareAnalysis) {
		obj.Lang = lang
	}
}

// MalwareAnalysisOptionConfidence sets the confidence attribute.
func MalwareAnalysisOptionConfidence(confidence int) MalwareAnalysisOption {
	return func(obj *MalwareAnalysis) {
		obj.Confidence = confidence
	}
}

// MalwareAnalysisOptionLabels sets the labels attribute.
func MalwareAnalysisOptionLabels(labels []string) MalwareAnalysisOption {
	return func(obj *MalwareAnalysis) {
		obj.Labels = labels
	}
}

// MalwareAnalysisOptionRevoked sets the revoked attribute.
func MalwareAnalysisOptionRevoked(rev bool) MalwareAnalysisOption {
	return func(obj *MalwareAnalysis) {
		obj.Revoked = rev
	}
}

// MalwareAnalysisOptionModified sets the modified attribute.
func MalwareAnalysisOptionModified(t *Timestamp) MalwareAnalysisOption {
	return func(obj *MalwareAnalysis) {
		obj.Modified = t
	}
}

// MalwareAnalysisOptionCreated sets the created attribute.
func MalwareAnalysisOptionCreated(t *Timestamp) MalwareAnalysisOption {
	return func(obj *MalwareAnalysis) {
		obj.Created = t
	}
}

// MalwareAnalysisOptionCreatedBy sets the created by by attribute.
func MalwareAnalysisOptionCreatedBy(id Identifier) MalwareAnalysisOption {
	return func(obj *MalwareAnalysis) {
		obj.CreatedBy = id
	}
}

/*
	MalwareAnalysis object options
*/

// MalwareAnalysisOptionVersion sets the version attribute.
func MalwareAnalysisOptionVersion(s string) MalwareAnalysisOption {
	return func(obj *MalwareAnalysis) {
		obj.Version = s
	}
}

// MalwareAnalysisOptionHostVM sets the host VM attribute.
func MalwareAnalysisOptionHostVM(s Identifier) MalwareAnalysisOption {
	return func(obj *MalwareAnalysis) {
		obj.HostVM = s
	}
}

// MalwareAnalysisOptionOS sets the OS attribute.
func MalwareAnalysisOptionOS(s Identifier) MalwareAnalysisOption {
	return func(obj *MalwareAnalysis) {
		obj.OS = s
	}
}

// MalwareAnalysisOptionInstalledSoftware sets the installed software attribute.
func MalwareAnalysisOptionInstalledSoftware(s []Identifier) MalwareAnalysisOption {
	return func(obj *MalwareAnalysis) {
		obj.InstalledSoftware = s
	}
}

// MalwareAnalysisOptionConfigurationVersion sets the configuration version
// attribute.
func MalwareAnalysisOptionConfigurationVersion(s string) MalwareAnalysisOption {
	return func(obj *MalwareAnalysis) {
		obj.ConfigurationVersion = s
	}
}

// MalwareAnalysisOptionModules sets the modules attribute.
func MalwareAnalysisOptionModules(s []string) MalwareAnalysisOption {
	return func(obj *MalwareAnalysis) {
		obj.Modules = s
	}
}

// MalwareAnalysisOptionAnalysisEngineVersion sets the analysis engine version
// attribute.
func MalwareAnalysisOptionAnalysisEngineVersion(s string) MalwareAnalysisOption {
	return func(obj *MalwareAnalysis) {
		obj.AnalysisEngineVersion = s
	}
}

// MalwareAnalysisOptionAnalysisDefinitionVersion sets the analysis definition
// version attribute.
func MalwareAnalysisOptionAnalysisDefinitionVersion(s string) MalwareAnalysisOption {
	return func(obj *MalwareAnalysis) {
		obj.AnalysisDefinitionVersion = s
	}
}

// MalwareAnalysisOptionSubmitted sets the submitted attribute.
func MalwareAnalysisOptionSubmitted(s *Timestamp) MalwareAnalysisOption {
	return func(obj *MalwareAnalysis) {
		obj.Submitted = s
	}
}

// MalwareAnalysisOptionAnalysisStarted sets the analysis started attribute.
func MalwareAnalysisOptionAnalysisStarted(s *Timestamp) MalwareAnalysisOption {
	return func(obj *MalwareAnalysis) {
		obj.AnalysisStarted = s
	}
}

// MalwareAnalysisOptionAnalysisEnded sets the analysis ended attribute.
func MalwareAnalysisOptionAnalysisEnded(s *Timestamp) MalwareAnalysisOption {
	return func(obj *MalwareAnalysis) {
		obj.AnalysisEnded = s
	}
}

const (
	// MalwareAVResultMalicious AV tool reported the malware binary as
	// malicious.
	MalwareAVResultMalicious = "malicious"
	// MalwareAVResultSuspicious AV tool reported the malware binary as
	// suspicious but not definitively malicious.
	MalwareAVResultSuspicious = "suspicious"
	// MalwareAVResultBenign AV tool reported the malware binary as benign.
	MalwareAVResultBenign = "benign"
	// MalwareAVResultUnknown AV tool was unable to determine whether the
	// malware binary is malicious.
	MalwareAVResultUnknown = "unknown"
)
